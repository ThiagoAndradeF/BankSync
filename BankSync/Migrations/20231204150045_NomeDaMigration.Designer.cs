// <auto-generated />
using System;
using BankSynce.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BankSynce.Migrations
{
    [DbContext(typeof(BankSynceContext))]
    [Migration("20231204150045_NomeDaMigration")]
    partial class NomeDaMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BankSynce.Entities.OCS_CONTA", b =>
                {
                    b.Property<int>("CD_CONTA")
                        .HasColumnType("integer");

                    b.Property<int>("CD_BANCO")
                        .HasColumnType("integer");

                    b.Property<int?>("CD_CLIENTE")
                        .HasColumnType("integer");

                    b.Property<int?>("CD_FORNECEDOR")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DT_CADASTRO")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NR_AGENCIA")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("NR_CONTA")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("VL_SALDO")
                        .HasColumnType("numeric");

                    b.HasKey("CD_CONTA");

                    b.ToTable("OCS_CONTA");
                });

            modelBuilder.Entity("BankSynce.Entities.OCS_TRANSACOES", b =>
                {
                    b.Property<int>("CD_TRANSACAO")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CD_TRANSACAO"));

                    b.Property<int>("CD_CLIENTE")
                        .HasColumnType("integer");

                    b.Property<int>("CD_CONTA_ENTRADA")
                        .HasColumnType("integer");

                    b.Property<int>("CD_CONTA_SAIDA")
                        .HasColumnType("integer");

                    b.Property<int>("CD_FORNECEDOR")
                        .HasColumnType("integer");

                    b.Property<int>("CLIENTECD_CLIENTE")
                        .HasColumnType("integer");

                    b.Property<string>("DS_TRANSACAO")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("DT_TRANSACAO")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FORNECEDORCD_FORNECEDOR")
                        .HasColumnType("integer");

                    b.Property<int>("ID_TRANSACAO")
                        .HasColumnType("integer");

                    b.Property<int>("VL_TRANSACAO")
                        .HasColumnType("integer");

                    b.HasKey("CD_TRANSACAO");

                    b.HasIndex("CD_CONTA_ENTRADA");

                    b.HasIndex("CD_CONTA_SAIDA");

                    b.HasIndex("CLIENTECD_CLIENTE");

                    b.HasIndex("FORNECEDORCD_FORNECEDOR");

                    b.ToTable("OCS_TRANSACOES");
                });

            modelBuilder.Entity("BankSynce.Entities.PES_CLIENTE", b =>
                {
                    b.Property<int>("CD_CLIENTE")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CD_CLIENTE"));

                    b.Property<int>("CD_USUARIO")
                        .HasColumnType("integer");

                    b.Property<string>("NM_CLIENTE")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("CD_CLIENTE");

                    b.ToTable("PES_CLIENTE");
                });

            modelBuilder.Entity("BankSynce.Entities.PES_FORNECEDOR", b =>
                {
                    b.Property<int>("CD_FORNECEDOR")
                        .HasColumnType("integer");

                    b.Property<int>("CD_CLIENTE")
                        .HasColumnType("integer");

                    b.Property<string>("NM_FORNECEDOR")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("CD_FORNECEDOR");

                    b.ToTable("PES_FORNECEDOR");
                });

            modelBuilder.Entity("BankSynce.Entities.TAB_BANCO", b =>
                {
                    b.Property<int>("CD_BANCO")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CD_BANCO"));

                    b.Property<string>("NM_BANCO")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("CD_BANCO");

                    b.ToTable("TAB_BANCO");
                });

            modelBuilder.Entity("BankSynce.Entities.USER_USUARIO", b =>
                {
                    b.Property<int>("CD_USUARIO")
                        .HasColumnType("integer");

                    b.Property<int>("CD_CLIENTE")
                        .HasColumnType("integer");

                    b.Property<string>("DS_EMAIL")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DS_SENHA")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("DT_CADASTRO")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CD_USUARIO");

                    b.ToTable("USER_USUARIO");
                });

            modelBuilder.Entity("BankSynce.Entities.OCS_CONTA", b =>
                {
                    b.HasOne("BankSynce.Entities.TAB_BANCO", "BANCO")
                        .WithMany("CONTAS")
                        .HasForeignKey("CD_CONTA")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankSynce.Entities.PES_CLIENTE", "CLIENTE")
                        .WithMany("CONTAS")
                        .HasForeignKey("CD_CONTA")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankSynce.Entities.PES_FORNECEDOR", "FORNECEDOR")
                        .WithMany("CONTAS")
                        .HasForeignKey("CD_CONTA")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BANCO");

                    b.Navigation("CLIENTE");

                    b.Navigation("FORNECEDOR");
                });

            modelBuilder.Entity("BankSynce.Entities.OCS_TRANSACOES", b =>
                {
                    b.HasOne("BankSynce.Entities.OCS_CONTA", "CONTA_ENTRADA")
                        .WithMany("TRANSACOES_ENTRADA")
                        .HasForeignKey("CD_CONTA_ENTRADA")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BankSynce.Entities.OCS_CONTA", "CONTA_SAIDA")
                        .WithMany("TRANSACOES_SAIDA")
                        .HasForeignKey("CD_CONTA_SAIDA")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BankSynce.Entities.PES_CLIENTE", "CLIENTE")
                        .WithMany()
                        .HasForeignKey("CLIENTECD_CLIENTE")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankSynce.Entities.PES_FORNECEDOR", "FORNECEDOR")
                        .WithMany()
                        .HasForeignKey("FORNECEDORCD_FORNECEDOR")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CLIENTE");

                    b.Navigation("CONTA_ENTRADA");

                    b.Navigation("CONTA_SAIDA");

                    b.Navigation("FORNECEDOR");
                });

            modelBuilder.Entity("BankSynce.Entities.PES_FORNECEDOR", b =>
                {
                    b.HasOne("BankSynce.Entities.PES_CLIENTE", "CLIENTE")
                        .WithMany("FORNECEDORES")
                        .HasForeignKey("CD_FORNECEDOR")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CLIENTE");
                });

            modelBuilder.Entity("BankSynce.Entities.USER_USUARIO", b =>
                {
                    b.HasOne("BankSynce.Entities.PES_CLIENTE", "CLIENTE")
                        .WithOne("USUARIO")
                        .HasForeignKey("BankSynce.Entities.USER_USUARIO", "CD_USUARIO")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CLIENTE");
                });

            modelBuilder.Entity("BankSynce.Entities.OCS_CONTA", b =>
                {
                    b.Navigation("TRANSACOES_ENTRADA");

                    b.Navigation("TRANSACOES_SAIDA");
                });

            modelBuilder.Entity("BankSynce.Entities.PES_CLIENTE", b =>
                {
                    b.Navigation("CONTAS");

                    b.Navigation("FORNECEDORES");

                    b.Navigation("USUARIO")
                        .IsRequired();
                });

            modelBuilder.Entity("BankSynce.Entities.PES_FORNECEDOR", b =>
                {
                    b.Navigation("CONTAS");
                });

            modelBuilder.Entity("BankSynce.Entities.TAB_BANCO", b =>
                {
                    b.Navigation("CONTAS");
                });
#pragma warning restore 612, 618
        }
    }
}
